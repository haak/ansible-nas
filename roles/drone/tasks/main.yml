---
- name: Create drone Directories
  file:
    path: "{{ item }}"
    state: directory
  with_items:
    - "{{ drone_config_directory }}"

- name: drone-server Docker Container
  docker_container:
    name: drone-server
    image: drone/drone:1
    pull: true
    volumes:
      - "{{ drone_config_directory }}:/data:rw"
    ports:
      - "{{ drone_port_http }}:80"
    env:
      TZ: "{{ ansible_nas_timezone }}"
      PUID: "{{ drone_user_id }}"
      PGID: "{{ drone_group_id }}"
      DRONE_SERVER_HOST: ${DRONE_SERVER_HOST}
      DRONE_SERVER_PROTO: ${DRONE_SERVER_PROTO}
      DRONE_RPC_SECRET: ${DRONE_RPC_SECRET}

      DRONE_GITHUB_SERVER: https://github.com
      DRONE_GITHUB_CLIENT_ID: ${DRONE_GITHUB_CLIENT_ID}
      DRONE_GITHUB_CLIENT_SECRET: ${DRONE_GITHUB_CLIENT_SECRET}
      DRONE_USER_FILTER: $DRONE_USER_FILTER

      DRONE_LOGS_PRETTY: "true"
      DRONE_LOGS_COLOR: "true"
    restart_policy: unless-stopped
    memory: "{{ drone_memory }}"

- name: drone-runner Docker Container
  docker_container:
    name: drone-runner
    image: drone/drone-runner-docker:1
    pull: true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    env:
      TZ: "{{ ansible_nas_timezone }}"
      PUID: "{{ drone_user_id }}"
      PGID: "{{ drone_group_id }}"
      DRONE_RPC_HOST: ${DRONE_RPC_HOST}
      DRONE_RPC_PROTO: ${DRONE_RPC_PROTO}
      DRONE_RPC_SECRET: ${DRONE_RPC_SECRET}
      DRONE_RUNNER_CAPACITY: "3"

    restart_policy: unless-stopped
    memory: "{{ drone_memory }}"
